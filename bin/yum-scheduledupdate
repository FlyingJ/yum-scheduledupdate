#!/usr/bin/env python

import ConfigParser
import logging
import optparse
import os
import signal
import subprocess
import sys

def clean_lock():
  # remove /etc/noyumupdate
  if options.debug:
    print "[DEBUG] Now, in function to remove /etc/noyumupdate."

def create_body(no_update, command_output):
  # generate header,footer for pending updates
  if no_update:
    notification_header = "Updates to be applied:\n"
    notification_footer = "Open a ServiceDesk ticket to avoid having updates applied."
  # generate header,footer for applied updates
  else:
    notification_header = "Updates applied:\n"
    notification_footer = "Open a ServiceDesk ticket to report any errant behavior caused by the updates."

  notification_body = "%s\n%s\n%s" % (notification_header, command_output, notification_footer)
  return notification_body

# read command line options
# --debug give debug output
# --dry-run print what you are going to do, but do nothing
# -c check-only and notify of pending package updates (default)
# -u update and notify of updated packages (override default)
# -f alternate configuration file (default: /etc/sysconfig/yum-scheduledupdate)
parser = optparse.OptionParser()
parser.set_defaults(debug = False,
                    dry_run = False,
                    no_update = True,
                    config_file = "/etc/sysconfig/yum-scheduledupdate")
parser.add_option("--debug", action="store_true", dest="debug")
parser.add_option("--dry-run", action="store_true", dest="dry_run")
parser.add_option("-c", "--check-updates", action="store_true", dest="no_update")
parser.add_option("-u", "--update", action="store_false", dest="no_update")
parser.add_option("-f", "--config-file", action="store", dest="config_file")

(options, args) = parser.parse_args()

# 
# check for presence of /etc/noyumupdate
# exit, if present
if os.path.exists('/etc/noyumupdate'):
  # log a message
  #logging.warning('Found /etc/noyumupdate. Skipping update run!')
  if options.debug:
    print '[DEBUG] Found /etc/noyumupdate. Skipping update run!'
  if options.debug:
    print "[DEBUG] Remove /etc/noyumupdate so we function properly next time."
  clean_lock()
  exit()

if options.debug:
  print "[DEBUG] Printing debug output."
else:
  print "[NODEBUG] Not printing debug output. Seriously. No, really!"

if options.dry_run:
  print "[DRYRUN] Not doing anything"
else:
  print "[LIVE] Doing stuff"

# read configuration file
# default to /etc/sysconfig/yum-scheduledupdate
# override with -f command line argument
if options.debug:
  print "[DEBUG] Using configuration file: %s" % (options.config_file)

if options.debug:
  print "[DEBUG] Now is the time I would be reading said configuration file."

if not os.path.exists(options.config_file):
  message = 'Configuration file %s not found.' % (options.config_file)
  raise Exception(message)

config = ConfigParser.ConfigParser()
config.read(options.config_file)
email_list = None
yum_config = None
yum_exclude = None

# MAILLIST
## MAXWAITTIME
# CONFIGFILE
# EXCLUDE
email_list = config.get('main', 'MAILLIST')
yum_config = config.get('main', 'CONFIGFILE')
yum_exclude = config.get('main', 'EXCLUDE')

if options.debug:
  print "[DEBUG] email_list: %s" % (email_list)
  print "[DEBUG] yum_config: %s" % (yum_config)
  print "[DEBUG] yum_exclude: %s" % (yum_exclude)

# construct and run yum command
# check-update with -c command line switch
# update with -u command line switch
# save output
command = ['/usr/bin/yum',]
if options.debug:
  print "[DEBUG] Base command: %s" % (command)

# add some global yum opts if configured above
if yum_config:
  yum_config_arg = "--config=%s" % (yum_config)
  command.append(yum_config_arg)
# need an exclude argument for each glob
if yum_exclude:
  for exclude in yum_exclude.split(' '):
    yum_exclude_arg = "--exclude=%s" % (exclude)
    command.append(yum_exclude_arg)

if options.no_update:
  command.append('--quiet')
  command.append('check-update')
else:
  command.append('--assumeyes')
  command.append('update')

if options.debug:
  print "[DEBUG] Final command list: %s" % (command)

if not options.dry_run:
  if options.debug:
    print "[DEBUG] Running the command..."
  # run the command, collecting the output
  command_output = subprocess.Popen(command, stdout=subprocess.PIPE).communicate()[0]
  if options.debug:
    print "[DEBUG] Command output:"
    print command_output

  # use yum output to construct body of notification email
  if options.debug:
    print "[DEBUG] Constructing body of the notification email..."
  notification_body = create_body(options.no_update, command_output)

  if options.debug:
    print "[DEBUG] This is the body of the notification email:"
    print notification_body

  # send notification email to email list (MAILLIST)
  if options.debug:
    print "[DEBUG] Now, send an email letting MAILLIST know what has transpired."

  # remove /etc/noyumupdate
  # this should happen every time the script exits
  # need signal handler
  #  cleanup on all signals

  if options.debug:
    print "[DEBUG] Remove /etc/noyumupdate so we function properly next time."
  clean_lock()
else:
  print "[DRYRUN] Not doing anything"

#### some useful code snippets
'''
>>> output = subprocess.Popen(['/usr/bin/yum', '--disablerepo=*', '--enablerepo=fnal-mps', 'list', 'available', 'wh6*'], stdout=subprocess.PIPE).communicate()[0]
>>> print output
Loaded plugins: downloadonly, fastestmirror, kabi, list-data, local, priorities,
: protectbase, refresh-packagekit, rpm-warm-cache, security,
: verify, versionlock
Loading support for Red Hat kernel ABI
Loading mirror speeds from cached hostfile
0 packages excluded due to repository protections
Available Packages
wh6e-dell2150.noarch 1-1 fnal-mps
wh6w-hp3530.noarch 1-1 fnal-mps
wh6w-hp775.noarch 1-1 fnal-mps


>>> output = subprocess.Popen(['/usr/bin/yum', '--quiet', 'check-update'], stdout=subprocess.PIPE).communicate()[0]
>>> print output

mysql55-mysql.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-bench.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-devel.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-libs.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-server.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-test.x86_64 5.5.37-1.2.el6 softwarecollections
xorg-x11-drv-wacom.x86_64 0.16.1-4.el6 _local


Do not love the asymmetry and absolute behavior of the --quiet switch.

[root@dethklok ~]# yum --quiet check-update

mysql55-mysql.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-bench.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-devel.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-libs.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-server.x86_64 5.5.37-1.2.el6 softwarecollections
mysql55-mysql-test.x86_64 5.5.37-1.2.el6 softwarecollections
xorg-x11-drv-wacom.x86_64 0.16.1-4.el6 _local
[root@dethklok ~]# yum --quiet update

====================================================================================================
Package Arch Version Repository Size
====================================================================================================
Updating:
mysql55-mysql x86_64 5.5.37-1.2.el6 softwarecollections 5.9 M
mysql55-mysql-bench x86_64 5.5.37-1.2.el6 softwarecollections 431 k
mysql55-mysql-devel x86_64 5.5.37-1.2.el6 softwarecollections 177 k
mysql55-mysql-libs x86_64 5.5.37-1.2.el6 softwarecollections 217 k
mysql55-mysql-server x86_64 5.5.37-1.2.el6 softwarecollections 10 M
mysql55-mysql-test x86_64 5.5.37-1.2.el6 softwarecollections 6.9 M
xorg-x11-drv-wacom x86_64 0.16.1-4.el6 _local 236 k

Transaction Summary
====================================================================================================
Upgrade 7 Package(s)

Is this ok [y/N]: n
Exiting on user Command
[root@dethklok ~]# yum --quiet --assumeyes update
[root@dethklok ~]# yum --quiet check-update
[root@dethklok ~]# yum --quiet --assumeyes downgrade xorg-x11-drv-wacom
[root@dethklok ~]# yum --quiet check-update

xorg-x11-drv-wacom.x86_64 0.16.1-4.el6 _local
[root@dethklok ~]# yum --assumeyes update
Loaded plugins: downloadonly, fastestmirror, kabi, list-data, local, priorities, protectbase,
: refresh-packagekit, rpm-warm-cache, security, verify, versionlock
Loading support for Red Hat kernel ABI
Loading mirror speeds from cached hostfile
* softwarecollections: ftp2.scientificlinux.org
2 packages excluded due to repository priority protections
0 packages excluded due to repository protections
Setting up Update Process
Resolving Dependencies
--> Running transaction check
---> Package xorg-x11-drv-wacom.x86_64 0:0.16.1-3.el6 will be updated
---> Package xorg-x11-drv-wacom.x86_64 0:0.16.1-4.el6 will be an update
--> Finished Dependency Resolution

Dependencies Resolved

====================================================================================================
Package Arch Version Repository Size
====================================================================================================
Updating:
xorg-x11-drv-wacom x86_64 0.16.1-4.el6 _local 236 k

Transaction Summary
====================================================================================================
Upgrade 1 Package(s)

Total download size: 236 k
Downloading Packages:
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
Updating : xorg-x11-drv-wacom-0.16.1-4.el6.x86_64 1/2
Cleanup : xorg-x11-drv-wacom-0.16.1-3.el6.x86_64 2/2
Verifying : xorg-x11-drv-wacom-0.16.1-4.el6.x86_64 1/2
Verifying : xorg-x11-drv-wacom-0.16.1-3.el6.x86_64 2/2

Updated:
xorg-x11-drv-wacom.x86_64 0:0.16.1-4.el6

Complete!
'''
